const p='<sw-checkbox-field disabled="disabled" :value="value" :isLoading="isLoading" v-bind="$attrs" v-on="$listeners" :label="label"> </sw-checkbox-field>';Shopware.Component.register("mapp-connection-status",{template:p,inject:["mappconnect"],model:{prop:"value",event:"change"},data(){return{isLoading:!1,label:"Checking..."}},props:{value:{required:!0}},created(){this.isLoading=!0,this.mappconnect.getConnectionStatus().then(e=>{this.isLoading=!1,e.status=="OK"&&(this.label="OK. Connected",this.value||this.$emit("change",!0)),e.status=="ERROR"&&(this.label="ERROR: "+this.error),e.status=="NO"&&(this.label="Not connected")})}});const c='<sw-single-select labelProperty="name" valueProperty="id" :options="options" :value="value" v-bind="$attrs" v-on="$listeners"> </sw-single-select>';Shopware.Component.register("mapp-select",{template:c,inject:["mappconnect"],data(){return{results:[],isLoading:!0}},props:{value:{required:!0},entity:{required:!0}},created(){if(this.isLoading=!0,this.entity=="group"&&this.mappconnect.getGroups().then(e=>{this.isLoading=!0,this.results=e}),this.entity=="message")return this.mappconnect.getMessages().then(e=>{this.isLoading=!0,this.results=e})},computed:{options(){return this.results}}});const n=Shopware.Classes.ApiService;class m extends n{constructor(t,a,s="mappconnect"){super(t,a,s)}getConnectionStatus(){const t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/connection-status`,{headers:t}).then(a=>n.handleResponse(a))}getGroups(){const t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/groups`,{headers:t}).then(a=>n.handleResponse(a))}getMessages(){const t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/messages`,{headers:t}).then(a=>n.handleResponse(a))}}const h=`<sw-page> <template #search-bar> <sw-search-bar initialSearchType="event_action" placeholder="Search" :initialSearch="term" @search="onSearch"> </sw-search-bar> </template> <template #smart-bar-header> <h2> MappConnect Business Events <span v-if="total > 0"> ({{ total }})</span> </h2> </template> <template #smart-bar-actions> <sw-button :routerLink="{ name: 'mapp.event.config.create' }" variant="primary"> Add Event </sw-button> </template> <template #content> <sw-entity-listing :repository="mappEventRepository" :columns="mappEventColumns" :items="items" :sortBy="sortBy" :sortDirection="sortDirection" :isLoading="isLoading" :allowInlineEdit="false" detailRoute="mapp.event.config.detail" > <template #column-eventName="{ item, column }"> <strong> <router-link :to="{ name: column.routerLink, params: { id: item.id } }"> {{ $tc('global.businessEvents.' + snakeCaseEventName(item.eventName)) }} </router-link> </strong><br> {{ item.eventName }} </template> <template #column-salesChannels="{ item }"> {{ item.salesChannels.map(s=>s.name).join(", ")}} </template> <template #column-active="{ item, isInlineEdit }"> <sw-data-grid-column-boolean :value="item.active" :isInlineEdit="isInlineEdit"> </sw-data-grid-column-boolean> </template> </sw-entity-listing> </template> </sw-page>`,d=Shopware.Utils.string.snakeCase,{Component:u,Mixin:v,Data:{Criteria:i}}=Shopware;u.register("mapp-event-config-list",{template:h,inject:["repositoryFactory"],mixins:[v.getByName("listing")],metaInfo(){return{title:this.$createTitle()}},data(){return{items:null,sortBy:"eventName",sortDirection:"ASC",isLoading:!1,total:0}},computed:{mappEventRepository(){return this.repositoryFactory.create("mapp_event")},mappEventCriteria(){const e=new i;if(e.setTerm(null),this.term){const t=this.term.split(" ");["eventName","messageId"].forEach(s=>{t.forEach(o=>{o.length>1&&e.addQuery(i.contains(s,o),500)})})}return e.addAssociation("salesChannels"),e.addSorting(i.sort(this.sortBy,this.sortDirection)),e},mappEventColumns(){return[{property:"eventName",dataIndex:"eventName",label:"Event Name",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0,primary:!0},{property:"title",dataIndex:"title",label:"Title",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0},{property:"messageId",dataIndex:"messageId",label:"Mapp MessageId",routerLink:"mapp.event.config.detail",multiLine:!0,allowResize:!0},{property:"salesChannels",dataIndex:"salesChannels",label:"Sales Channel",allowResize:!0,multiLine:!0},{property:"active",dataIndex:"active",label:"Active",align:"center",allowResize:!0}]}},methods:{getList(){return this.isLoading=!0,this.mappEventRepository.search(this.mappEventCriteria,Shopware.Context.api).then(e=>{this.items=e,this.total=e.total,this.isLoading=!1})},snakeCaseEventName(e){return d(e)}}});const g=`<sw-page class="sw-event-action-detail"> <template #smart-bar-header> <h2>{{ identifier }}</h2> </template> <template #smart-bar-actions> <sw-button :routerLink="{ name: 'mapp.event.config.index' }"> {{ $tc('global.default.cancel') }} </sw-button> <sw-button-process :isLoading="isLoading" :processSuccess="isSaveSuccessful" variant="primary" @update:processSuccess="saveFinish" :disabled="isLoading" @click.prevent="onSave"> {{ $tc('sw-product.detail.buttonSave') }} </sw-button-process> </template> <template #content> <sw-card-view> <sw-card :isLoading="isLoading"> <sw-container columns="75% 1fr" gap="30px"> <sw-text-field v-if="mappEvent" type="text" label="Title" placeholder="" :value="mappEvent.title" @update:value="onEventTitleUpdate"> > </sw-text-field> <sw-switch v-if="mappEvent" label="Active" :value="mappEvent.active" bordered @update:value="onEventActiveUpdate"> </sw-switch> </sw-container> <sw-single-select v-if="mappEvent && businessEvents" label="Business Event" :options="businessEvents" :value="mappEvent.eventName" required labelProperty="label" valueProperty="name" @update:value="onEventNameUpdate"> <template #selection-label-property="{ item }"> <strong>{{ item.label }}</strong> - {{ item.name }} </template> <template #result-label-property="{ item, highlightSearchTerm, labelProperty, searchTerm }"> <strong> <sw-highlight-text :text="item.label" :searchTerm="searchTerm"> </sw-highlight-text> </strong> {{ item.name }} </template> </sw-single-select> <sw-multi-select :options="salesChannels" label="Sales Channels" :value="selectedSalesChannels" labelProperty="name" valueProperty="id" @item-add="onSalesChannelAdd" @item-remove="onSalesChannelRemove" /> <mapp-select v-if="mappEvent" label="Message" entity="message" v-bind:value="mappEvent.messageId" @update:value="mappEvent.messageId = $event"> </mapp-select> </sw-card> </sw-card-view> </template> </sw-page>`,r=Shopware.Utils.string.snakeCase,{Component:E,Utils:w,Mixin:C,Data:{Criteria:l},Classes:{ShopwareError:S}}=Shopware,{mapPropertyErrors:f}=Shopware.Component.getComponentHelper();E.register("mapp-event-config-detail",{template:g,inject:["repositoryFactory","businessEventService"],mixins:[C.getByName("notification")],props:{mappEventId:{type:String,required:!1,default:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},watch:{mappEventId(){this.loadData()}},data(){return{businessEvents:null,mappEvent:null,isLoading:!1,recipients:[],isSaveSuccessful:!1,salesChannels:null,selectedSalesChannels:[]}},computed:{...f("mappEvent",["eventName"]),mappEventRepository(){return this.repositoryFactory.create("mapp_event")},mappEventCriteria(){const e=new l;return e.addAssociation("salesChannels"),e},identifier(){return this.mappEvent&&this.mappEvent.eventName?this.$tc(`global.businessEvents.${r(this.mappEvent.eventName)}`):"New MappConnect Business Event"},salesChannelCriteria(){const e=new l;return e.addSorting(l.sort("name")),e}},created(){this.loadSalesChannels(),this.createdComponent()},methods:{loadSalesChannels(){return this.repositoryFactory.create("sales_channel").search(this.salesChannelCriteria,Shopware.Context.api).then(t=>{this.salesChannels=t}).catch(t=>{this.createNotificationError({message:`Failed to load sales channels: ${t.message}`})})},createdComponent(){this.loadData()},onSalesChannelAdd(e){this.selectedSalesChannels=[e.id,...this.selectedSalesChannels],this.mappEvent.salesChannels=this.salesChannels.filter(t=>this.selectedSalesChannels.includes(t.id))},onSalesChannelRemove(e){this.selectedSalesChannels=this.selectedSalesChannels.filter(t=>t!==e.id),this.mappEventId?this.mappEvent.salesChannels.remove(e.id):this.mappEvent.salesChannels=this.salesChannels.filter(t=>this.selectedSalesChannels.includes(t.id))},loadData(e){return this.isLoading=!0,Promise.all([this.getBusinessEvents(),this.getMappEvent()]).then(([t,a])=>(this.businessEvents=this.addTranslatedEventNames(t),this.mappEvent=a,e||(this.selectedSalesChannels=a.salesChannels.map(s=>s.id)),this.isLoading=!1,Promise.resolve([t,a]))).catch(t=>(this.createNotificationError({message:t}),this.isLoading=!1,Promise.reject(t)))},getMappEvent(){if(!this.mappEventId){const e=this.mappEventRepository.create(Shopware.Context.api);return e.eventName="",e.active=!1,e}return this.mappEventRepository.get(this.mappEventId,Shopware.Context.api,this.mappEventCriteria)},onEventNameUpdate(e){this.mappEvent.eventName=e},onEventTitleUpdate(e){this.mappEvent.title=e},onEventActiveUpdate(e){this.mappEvent.active=e},getBusinessEvents(){return this.businessEventService.getBusinessEvents()},addTranslatedEventNames(e){return e.map(t=>{const a=r(t.name);return{...t,label:this.$tc(`global.businessEvents.${a}`)}})},onSave(){return this.isLoading=!0,this.mappEventRepository.save(this.mappEvent,Shopware.Context.api,this.mappEventCriteria).then(()=>this.mappEvent.isNew()?(this.$router.push({name:"mapp.event.config.detail",params:{id:this.mappEvent.id}}),Promise.resolve(this.mappEvent)):(this.loadData(!0),this.isSaveSuccessful=!0,Promise.resolve(this.mappEvent))).catch(e=>(this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),this.isLoading=!1,Promise.reject(e)))},saveFinish(){this.isSaveSuccessful=!1},snakeCaseEventName(e){return r(e)}}});Shopware.Module.register("mapp-event-config",{type:"plugin",name:"mapp-event-config",title:"Mapp Connect Events",description:"",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",favicon:"icon-module-settings.png",entity:"mapp_event",routes:{index:{component:"mapp-event-config-list",path:"index"},detail:{component:"mapp-event-config-detail",path:"detail/:id",props:{default:e=>({mappEventId:e.params.id})},meta:{parentPath:"mapp.event.config.index"}},create:{component:"mapp-event-config-detail",path:"create",meta:{parentPath:"mapp.event.config.index"}}},settingsItem:[{to:"mapp.event.config.index",group:"plugins",icon:"default-action-settings"}]});Shopware.Service().register("mappconnect",e=>{const t=Shopware.Application.getContainer("init");return new m(t.httpClient,e.loginService)});
//# sourceMappingURL=mapp-connect-BbIfi79r.js.map
